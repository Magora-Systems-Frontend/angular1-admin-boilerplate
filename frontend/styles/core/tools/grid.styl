/**
  helper function for _make-column
  @private
  @param {number} - total columns
  @param {number} - count column
  @param {px} [null] - the distance between the columns
*/
_calculate-width($total, $count, $indent = null){
  _$width = unit((floor(100 / $total * $count * 10000) / 10000), "%");
  if !!$indent {
    width: "calc(%s - %s)" % (_$width $indent);
  } else {
    width: _$width;
  }
}


/**
  use special make-float-col or make-inline-col
  @private
  @param {object[]} - column props { total, count, indent [0], min [*], max [*] }
*/
_make-column($props){
  for $col-obj in $props{
    if !$col-obj["total"] || !$col-obj["count"]{
      error("make column mixin error argument")
    }

    $total = remove-unit($col-obj["total"])
    $count = remove-unit($col-obj["count"])
    $indent = 0

    if $col-obj["indent"]{
      $indent = $col-obj["indent"]
    }

    if $col-obj["max"] && $col-obj["min"]{
      $max = $col-obj["max"]
      $min = $col-obj["min"]
      @media (min-width: unit($min, "px")) and (max-width: unit($max, "px")) {
        $m-calculate-width($total, $count, $indent)
      }
    } else if $col-obj["max"] {
      $max = $col-obj["max"]
      @media (max-width: unit($max, "px")) {
        $m-calculate-width($total, $count, $indent)
      }
    } else if $col-obj["min"] {
      $max = $col-obj["min"]
      @media (max-width: unit($max, "px")) {
        $m-calculate-width($total, $count, $indent)
      }
    } else {
      $m-calculate-width($total, $count, $indent)
    }
  }
}

/**
  Add inline row css props
  @param {unit} - indentation in the grid between the elements
*/
$m-make-inline-row($indent = null){
  if !$indent {
    +cache('$m-make-inline-row'){
      font-size: 0;
      width: 100%;
      box-sizing: border-box;
    }
  } else {
    +cache('$m-make-inline-row', $indent) {
      font-size: 0;
      width: "calc(100% + %s)" % ($indent);
      box-sizing: border-box;
      margin-left: (-($indent) / 2);
      margin-right: (-($indent) / 2);
      & > * {
        padding-left: ($indent / 2);
        padding-right: ($indent / 2);
      }
    }
  }

  {block}
}

/**
  Add float row css props
*/
$m-make-float-row(){
  +cache('$m-make-float-row'){
    width: 100%;
    box-sizing: border-box;
    &:before,
    &:after {
      content: " ";
      display: table;
    }

    &:after {
      clear: both;
    }
  }
  {block}
}


/**
  Add inline column css props
  @param {...object} - column props { total, count, indent [0], min [*], max [*] }
*/
$m-make-inline-col($props...){

  display inline-block;
  box-sizing border-box;

  _make-column($props);
}


/**
  Add float column css props
  @param {...object} - column props { total, count, indent [0], min [*], max [*] }
*/
$m-make-float-col($props...){
  float: left;
  box-sizing: border-box;
  height 100%;

  _make-column($props);
}